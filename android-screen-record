#!/bin/bash

function ensure_command_installation() {
  which $1 > /dev/null 2>&1
  if [ $? -eq 1 ]; then
    echo "$1 command is not found" >&2
    exit 1
  fi
}

function ensure_device_connected() {
  adb devices | grep -e "device$" > /dev/null
}

function progress() {
  local START_TIME=$(date +%s)

  local SPINNER=( "⠋" "⠙" "⠹" "⠸" "⠼" "⠴" "⠦" "⠧" "⠇" "⠏" )
  local _SPINNER_IDX=0

  while true; do
    printf "\r${SPINNER[_SPINNER_IDX]} Recording %s" `date -u -r $(($(date +%s) - START_TIME)) +%H:%M:%S`
    ((_SPINNER_IDX=(_SPINNER_IDX+1)%${#SPINNER[@]}))
    sleep 0.01
  done
}

function screenrecord() {
  local devices=$(adb devices | grep -e "device$")
  if [ $(echo -e "$devices" | wc -l) -eq 1 ]; then
    local device=$(echo -e "$devices" | awk '{ print $1 }')
  else
    local device=$(echo -e "$devices" | peco | awk '{ print $1 }')
  fi

  local DEVICE_MOVIE_DIR=$(adb -s $device shell 'echo $TMPDIR')
  local CURRENT_TIMESTAMP=`date "+%Y%m%d%H%M%S"`
  local MOVIE_DIR="${TMPDIR:-/tmp}/android-screen-record/${CURRENT_TIMESTAMP}"
  local NUMBER_OF_CORES=`sysctl -n hw.ncpu`

  while getopts "f:" opt; do
    case $opt in
      f)
        case "$OPTARG" in
          gif|mp4)
            FORMAT="$OPTARG"
            ;;
          *)
            echo "Invalid value for -f. Expected 'gif' or 'mp4', but got: $OPTARG" >&2
            exit 1
            ;;
        esac
        ;;
    esac
  done

  progress &

  trap : SIGINT
  adb -s $device shell "screenrecord $DEVICE_MOVIE_DIR/movie.mp4"
  trap SIGINT

  kill $! && wait $! 2>/dev/null

  echo -e "\nRecording finished."

  while true; do
    adb -s $device shell "ps -A -o name | grep -e '^screenrecord$'" > /dev/null
    if [ $? -eq 1 ]; then
      break
    fi

    echo 'Wait for screenrecord process termination...'
    sleep 1
  done

  mkdir -p "$MOVIE_DIR"
  adb -s $device pull "${DEVICE_MOVIE_DIR}/movie.mp4" "${MOVIE_DIR}/original.mp4" > /dev/null

  if [ "$FORMAT" = "" ] || [ "$FORMAT" = "gif" ]; then
    echo 'Convert the movie into gif animation files.'

    # Generate GIF files at all speeds in parallel
    {
      seq 10 10 30 | xargs -I ZZ -P $NUMBER_OF_CORES ffmpeg -loglevel panic -y -i "${MOVIE_DIR}/original.mp4" -vf scale=640:-1 -f gif -r ZZ "${MOVIE_DIR}/fps_ZZ_1x.gif"
    } &

    {
      seq 10 10 30 | xargs -I ZZ -P $NUMBER_OF_CORES ffmpeg -loglevel panic -y -i "${MOVIE_DIR}/original.mp4" -vf scale=640:-1,setpts=0.5*PTS -f gif -r ZZ "${MOVIE_DIR}/fps_ZZ_2x.gif"
    } &

    {
      seq 10 10 30 | xargs -I ZZ -P $NUMBER_OF_CORES ffmpeg -loglevel panic -y -i "${MOVIE_DIR}/original.mp4" -vf scale=640:-1,setpts=0.33*PTS -f gif -r ZZ "${MOVIE_DIR}/fps_ZZ_3x.gif"
    } &

    # Wait for all GIF conversions to complete
    wait
  fi

  if [ "$FORMAT" = "" ] || [ "$FORMAT" = "mp4" ]; then
    echo 'Convert the movie into low fps movie files.'

    # Generate MP4 files at all speeds in parallel
    {
      seq 30 30 60 | xargs -I ZZ -P $NUMBER_OF_CORES ffmpeg -loglevel panic -y -i "${MOVIE_DIR}/original.mp4" -f mp4 -r ZZ "${MOVIE_DIR}/fps_ZZ_1x.mp4"
    } &

    {
      seq 30 30 60 | xargs -I ZZ -P $NUMBER_OF_CORES ffmpeg -loglevel panic -y -i "${MOVIE_DIR}/original.mp4" -vf setpts=0.5*PTS -f mp4 -r ZZ "${MOVIE_DIR}/fps_ZZ_2x.mp4"
    } &

    {
      seq 30 30 60 | xargs -I ZZ -P $NUMBER_OF_CORES ffmpeg -loglevel panic -y -i "${MOVIE_DIR}/original.mp4" -vf setpts=0.33*PTS -f mp4 -r ZZ "${MOVIE_DIR}/fps_ZZ_3x.mp4"
    } &

    # Wait for all MP4 conversions to complete
    wait
  fi

  echo "The movie files are located at ${MOVIE_DIR}"
  open "$MOVIE_DIR"
}

for name in adb ffmpeg peco; do
  ensure_command_installation $name
done

ensure_device_connected
screenrecord $@
